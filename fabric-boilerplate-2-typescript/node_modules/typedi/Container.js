"use strict";
/**
 * Service container.
 */
var Container = (function () {
    function Container() {
    }
    // -------------------------------------------------------------------------
    // Public Static Methods
    // -------------------------------------------------------------------------
    /**
     * Registers a new constructor parameter handler.
     */
    Container.registerParamHandler = function (paramHandler) {
        this.paramHandlers.push(paramHandler);
    };
    /**
     * Registers a new class property handler.
     */
    Container.registerPropertyHandler = function (propertyHandler) {
        this.propertyHandlers.push(propertyHandler);
    };
    /**
     * Registers a new service.
     *
     * @param name Service name. Optional
     * @param type Service class
     * @param params Parameters to be sent to constructor on service initialization
     */
    Container.registerService = function (name, type, params) {
        this.registeredServices.push({ name: name, type: type, params: params });
    };
    Container.get = function (typeOrName, params) {
        // normalize parameters
        var type, name;
        if (typeof typeOrName === "string") {
            name = typeOrName;
        }
        else {
            type = typeOrName;
        }
        // find if service was already registered
        var registeredService = this.findRegisteredService(name, type);
        // console.log("registeredService: ", registeredService);
        if (registeredService) {
            if (!type)
                type = registeredService.type;
            if (!params)
                params = registeredService.params;
        }
        // find if instance of this object already initialized in the container and return it if it is
        var instance = this.findInstance(name, type);
        if (instance)
            return instance;
        // if named service was requested but service was not registered we throw exception
        if (!type && name)
            throw new Error("Service named " + name + " was not found, probably it was not registered");
        // if params are given we need to go throw each of them and initialize them all properly
        if (params) {
            params = this.initializeParams(type, params);
            params.unshift(null);
        }
        // create a new instance of the requested object
        var objectInstance = new (type.bind.apply(type, params))();
        this.instances.push({ name: name, type: type, instance: objectInstance });
        this.applyPropertyHandlers(type);
        return objectInstance;
    };
    Container.set = function (nameOrType, typeOrValue) {
        if (typeof nameOrType === "string") {
            this.instances.push({
                name: nameOrType,
                type: undefined,
                instance: typeOrValue
            });
        }
        else {
            this.instances.push({
                name: undefined,
                type: nameOrType,
                instance: typeOrValue
            });
        }
    };
    /**
     * Provides a set of values to be saved in the container.
     */
    Container.provide = function (values) {
        var _this = this;
        values.forEach(function (v) {
            if (v.name) {
                _this.set(v.name, v.value);
            }
            else {
                _this.set(v.type, v.value);
            }
        });
    };
    // -------------------------------------------------------------------------
    // Private Static Methods
    // -------------------------------------------------------------------------
    Container.applyPropertyHandlers = function (target) {
        this.propertyHandlers
            .filter(function (propertyHandler) { return propertyHandler.target.constructor === target || target.prototype instanceof propertyHandler.target.constructor; })
            .forEach(function (propertyHandler) {
            Object.defineProperty(propertyHandler.target, propertyHandler.key, {
                enumerable: true,
                writable: true,
                configurable: true,
                value: propertyHandler.getValue()
            });
        });
    };
    Container.findInstance = function (name, type) {
        if (name) {
            return this.findInstanceByName(name);
        }
        else if (type) {
            return this.findInstanceByType(type);
        }
    };
    Container.findInstanceByName = function (name) {
        return this.instances.reduce(function (found, typeInstance) {
            return typeInstance.name === name ? typeInstance.instance : found;
        }, undefined);
    };
    Container.findInstanceByType = function (type) {
        return this.instances.filter(function (instance) { return !instance.name; }).reduce(function (found, typeInstance) {
            return typeInstance.type === type ? typeInstance.instance : found;
        }, undefined);
    };
    Container.findRegisteredService = function (name, type) {
        if (name) {
            return this.findRegisteredServiceByName(name);
        }
        else if (type) {
            return this.findRegisteredServiceByType(type);
        }
    };
    Container.findRegisteredServiceByType = function (type) {
        return this.registeredServices.filter(function (service) { return !service.name; }).reduce(function (found, service) {
            // console.log(service.type, "::", type);
            // console.log(type.prototype instanceof service.type);
            return service.type === type || type.prototype instanceof service.type ? service : found;
        }, undefined);
    };
    Container.findRegisteredServiceByName = function (name) {
        return this.registeredServices.reduce(function (found, service) {
            return service.name === name ? service : found;
        }, undefined);
    };
    Container.findParamHandler = function (type, index) {
        return this.paramHandlers.reduce(function (found, param) {
            return param.type === type && param.index === index ? param : found;
        }, undefined);
    };
    Container.initializeParams = function (type, params) {
        var _this = this;
        return params.map(function (param, index) {
            var paramHandler = Container.findParamHandler(type, index);
            if (paramHandler)
                return paramHandler.getValue();
            if (param && param.name && !_this.isTypeSimple(param.name))
                return Container.get(param);
            return undefined;
        });
    };
    Container.isTypeSimple = function (param) {
        return ["string", "boolean", "number", "object"].indexOf(param.toLowerCase()) !== -1;
    };
    // -------------------------------------------------------------------------
    // Private Static Properties
    // -------------------------------------------------------------------------
    Container.instances = [];
    Container.paramHandlers = [];
    Container.propertyHandlers = [];
    Container.registeredServices = [];
    return Container;
}());
exports.Container = Container;

//# sourceMappingURL=Container.js.map
