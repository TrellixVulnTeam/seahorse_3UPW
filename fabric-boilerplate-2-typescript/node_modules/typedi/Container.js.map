{"version":3,"sources":["Container.ts"],"names":[],"mappings":"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","file":"Container.js","sourcesContent":["import {ParamHandler, PropertyHandler} from \"./Handlers\";\n\n/**\n * Special type that allows to use Function and to known its type as T.\n */\nexport type ConstructorFunction<T> = { new (...args: any[]): T };\n\n/**\n * Service container.\n */\nexport class Container {\n\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    private static instances: { name: string, type: Function, instance: Object }[] = [];\n    private static paramHandlers: ParamHandler[] = [];\n    private static propertyHandlers: PropertyHandler[] = [];\n    private static registeredServices: { name: string, type: Function, params: any[] }[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Registers a new constructor parameter handler.\n     */\n    static registerParamHandler(paramHandler: ParamHandler) {\n        this.paramHandlers.push(paramHandler);\n    }\n\n    /**\n     * Registers a new class property handler.\n     */\n    static registerPropertyHandler(propertyHandler: PropertyHandler) {\n        this.propertyHandlers.push(propertyHandler);\n    }\n\n    /**\n     * Registers a new service.\n     *\n     * @param name Service name. Optional\n     * @param type Service class\n     * @param params Parameters to be sent to constructor on service initialization\n     */\n    static registerService(name: string, type: Function, params?: any[]) {\n        this.registeredServices.push({ name: name, type: type, params: params });\n    }\n\n    /**\n     * Retrieves the service with the specific name or given type from the service container.\n     * Optionally parameters can be pass in the case if instance is initialized in the container for the first time.\n     */\n    static get<T>(type: ConstructorFunction<T>, params?: any[]): T;\n    static get<T>(name: string, params?: any[]): T;\n    static get<T>(typeOrName: ConstructorFunction<T>|string, params?: any[]): T {\n\n        // normalize parameters\n        let type: Function, name: string;\n        if (typeof typeOrName === \"string\") {\n            name = <string> typeOrName;\n        } else {\n            type = <Function> typeOrName;\n        }\n\n        // find if service was already registered\n        const registeredService = this.findRegisteredService(name, type);\n        // console.log(\"registeredService: \", registeredService);\n        if (registeredService) {\n            if (!type)\n                type = registeredService.type;\n            if (!params)\n                params = registeredService.params;\n        }\n\n        // find if instance of this object already initialized in the container and return it if it is\n        const instance = this.findInstance(name, type);\n        if (instance)\n            return <T> instance;\n\n        // if named service was requested but service was not registered we throw exception\n        if (!type && name)\n            throw new Error(`Service named ${name} was not found, probably it was not registered`);\n\n        // if params are given we need to go throw each of them and initialize them all properly\n        if (params) {\n            params = this.initializeParams(type, params);\n            params.unshift(null);\n        }\n\n        // create a new instance of the requested object\n        const objectInstance = new (type.bind.apply(type, params))();\n        this.instances.push({ name: name, type: type, instance: objectInstance });\n        this.applyPropertyHandlers(type);\n        return objectInstance;\n    }\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(type: Function, value: any): void;\n    static set(name: string, value: any): void;\n    static set(nameOrType: string|Function, typeOrValue: Function|any) {\n\n        if (typeof nameOrType === \"string\") {\n            this.instances.push({\n                name: nameOrType,\n                type: undefined,\n                instance: typeOrValue\n            });\n        } else {\n            this.instances.push({\n                name: undefined,\n                type: <Function> nameOrType,\n                instance: typeOrValue\n            });\n        }\n    }\n\n    /**\n     * Provides a set of values to be saved in the container.\n     */\n    static provide(values: { name?: string, type?: Function, value: any }[]) {\n        values.forEach(v => {\n            if (v.name) {\n                this.set(v.name, v.value);\n            } else {\n                this.set(v.type, v.value);\n            }\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    private static applyPropertyHandlers(target: Function) {\n        this.propertyHandlers\n            .filter(propertyHandler => propertyHandler.target.constructor === target || target.prototype instanceof propertyHandler.target.constructor)\n            .forEach(propertyHandler => {\n                Object.defineProperty(propertyHandler.target, propertyHandler.key, {\n                    enumerable: true,\n                    writable: true,\n                    configurable: true,\n                    value: propertyHandler.getValue()\n                });\n            });\n    }\n\n    private static findInstance(name: string, type: Function) {\n        if (name) {\n            return this.findInstanceByName(name);\n        } else if (type) {\n            return this.findInstanceByType(type);\n        }\n    }\n\n    private static findInstanceByName(name: string) {\n        return this.instances.reduce((found, typeInstance) => {\n            return typeInstance.name === name ? typeInstance.instance : found;\n        }, undefined);\n    }\n\n    private static findInstanceByType(type: Function) {\n        return this.instances.filter(instance => !instance.name).reduce((found, typeInstance) => {\n            return typeInstance.type === type ? typeInstance.instance : found;\n        }, undefined);\n    }\n\n    private static findRegisteredService(name: string, type: Function) {\n        if (name) {\n            return this.findRegisteredServiceByName(name);\n        } else if (type) {\n            return this.findRegisteredServiceByType(type);\n        }\n    }\n\n    private static findRegisteredServiceByType(type: Function) {\n        return this.registeredServices.filter(service => !service.name).reduce((found, service) => {\n            // console.log(service.type, \"::\", type);\n            // console.log(type.prototype instanceof service.type);\n            return service.type === type || type.prototype instanceof service.type ? service : found;\n        }, undefined);\n    }\n\n    private static findRegisteredServiceByName(name: string) {\n        return this.registeredServices.reduce((found, service) => {\n            return service.name === name ? service : found;\n        }, undefined);\n    }\n\n    private static findParamHandler(type: Function, index: number): ParamHandler {\n        return this.paramHandlers.reduce((found, param) => {\n            return param.type === type && param.index === index ? param : found;\n        }, undefined);\n    }\n\n    private static initializeParams(type: Function, params: any[]): any[] {\n        return params.map((param, index) => {\n            const paramHandler = Container.findParamHandler(type, index);\n            if (paramHandler)\n                return paramHandler.getValue();\n\n            if (param && param.name && !this.isTypeSimple(param.name))\n                return Container.get(param);\n\n            return undefined;\n        });\n    }\n\n    private static isTypeSimple(param: string): boolean {\n        return [\"string\", \"boolean\", \"number\", \"object\"].indexOf(param.toLowerCase()) !== -1;\n    }\n}"],"sourceRoot":""}